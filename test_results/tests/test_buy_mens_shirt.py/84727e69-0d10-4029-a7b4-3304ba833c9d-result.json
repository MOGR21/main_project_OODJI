{"name": "test_buy_mens_shirt", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=114.0.5735.199)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0053A813+48355]\n\t(No symbol) [0x004CC4B1]\n\t(No symbol) [0x003D5358]\n\t(No symbol) [0x003BD293]\n\t(No symbol) [0x0041E37B]\n\t(No symbol) [0x0042C473]\n\t(No symbol) [0x0041A536]\n\t(No symbol) [0x003F82DC]\n\t(No symbol) [0x003F93DD]\n\tGetHandleVerifier [0x0079AABD+2539405]\n\tGetHandleVerifier [0x007DA78F+2800735]\n\tGetHandleVerifier [0x007D456C+2775612]\n\tGetHandleVerifier [0x005C51E0+616112]\n\t(No symbol) [0x004D5F8C]\n\t(No symbol) [0x004D2328]\n\t(No symbol) [0x004D240B]\n\t(No symbol) [0x004C4FF7]\n\tBaseThreadInitThunk [0x762E00C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77C07B4E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77C07B1E+238]", "trace": "@allure.description(\"Test Buy Mens Shirt\")\n    def test_buy_mens_shirt():\n    \n        dir_path = pathlib.Path.home()\n        path = Path(dir_path, 'PycharmProjects', 'main_project_OODJI', 'utilities', 'chromedriver.exe')\n        print(str(path))\n        driver = webdriver.Chrome(path)\n    \n        print(\"Start Test Buy Mens Shirt\")\n    \n        shop = MainPage(driver)\n        shop.open_main_page()\n    \n        shop.open_mens_collection()\n    \n        shirt = MansCollectionPage(driver)\n        shirt.click_rubashki()\n        shirt.get_current_url()\n        shirt.assert_url('https://www.oodji.com/mens_collection/rubashki/')\n    \n        shirt_1 = MansCollectionRubashki(driver)\n        shirt_1.select_product()\n    \n        cart = CartPage(driver)\n        cart.get_current_url()\n        cart.assert_url('https://www.oodji.com/cart/')\n>       cart.click_basket_checkout_button()\n\ntests\\test_buy_mens_shirt.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\cart_page.py:28: in click_basket_checkout_button\n    self.get_basket_checkout_button().click()\npages\\cart_page.py:23: in get_basket_checkout_button\n    return WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable((By.XPATH, self.basket_checkout_button)))\nC:\\Program Files\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:81: in until\n    value = method(self._driver)\nC:\\Program Files\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:312: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nC:\\Program Files\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:856: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nC:\\Program Files\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000011C86876B50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C07B4E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C07B1E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=114.0.5735.199)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0053A813+48355]\nE       \t(No symbol) [0x004CC4B1]\nE       \t(No symbol) [0x003D5358]\nE       \t(No symbol) [0x003BD293]\nE       \t(No symbol) [0x0041E37B]\nE       \t(No symbol) [0x0042C473]\nE       \t(No symbol) [0x0041A536]\nE       \t(No symbol) [0x003F82DC]\nE       \t(No symbol) [0x003F93DD]\nE       \tGetHandleVerifier [0x0079AABD+2539405]\nE       \tGetHandleVerifier [0x007DA78F+2800735]\nE       \tGetHandleVerifier [0x007D456C+2775612]\nE       \tGetHandleVerifier [0x005C51E0+616112]\nE       \t(No symbol) [0x004D5F8C]\nE       \t(No symbol) [0x004D2328]\nE       \t(No symbol) [0x004D240B]\nE       \t(No symbol) [0x004C4FF7]\nE       \tBaseThreadInitThunk [0x762E00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C07B4E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C07B1E+238]\n\nC:\\Program Files\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: NoSuchWindowException"}, "description": "Test Buy Mens Shirt", "steps": [{"name": "Open Main Page", "status": "passed", "start": 1688425848985, "stop": 1688425850893}, {"name": "Open Mens Collection", "status": "passed", "start": 1688425850893, "stop": 1688425851469}, {"name": "Click Rubashki", "status": "passed", "start": 1688425851469, "stop": 1688425852475}, {"name": "Select Product", "status": "passed", "start": 1688425852483, "stop": 1688425858974}], "attachments": [{"name": "stdout", "source": "c205f91f-37ee-4fbc-b48d-ae711f9e4cf7-attachment.txt", "type": "text/plain"}], "start": 1688425847893, "stop": 1688425865654, "uuid": "acb62e08-a64c-430b-a4d1-d61a7b8f5c0d", "historyId": "6dabf261187b1d5053e769056d86da2d", "testCaseId": "6dabf261187b1d5053e769056d86da2d", "fullName": "tests.test_buy_mens_shirt#test_buy_mens_shirt", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_buy_mens_shirt"}, {"name": "host", "value": "DESKTOP-UR43AI0"}, {"name": "thread", "value": "11788-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_buy_mens_shirt"}]}